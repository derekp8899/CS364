/**
 * 
 */
package worker;

import java.util.ArrayList;
import java.util.Arrays;

import javax.jms.Connection;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;

import api.BrokerConfig;
import api.PrimeChecker;

/**
 * @author david
 *
 */
public class TestWorker implements BrokerConfig {

	/**
	 * @param args ignored
	 */
	public static void main(String[] args) {
		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
				DEFAULT_BROKER);
		
		Connection connection = null;
		try {
			connection = factory.createConnection();
			Session session = connection.createSession(
					false, Session.AUTO_ACKNOWLEDGE);
			Destination dataQueue = session.createQueue(DATA_QUEUE);
			Destination workerQueue = session.createQueue(WORKER_QUEUE);
			MessageProducer producer = session.createProducer(workerQueue);
			MessageConsumer consumer = session.createConsumer(dataQueue);
			
			connection.start();
			
			Message message = consumer.receive();
			
			if (message instanceof TextMessage) {
				TextMessage tm = (TextMessage)message;
				System.out.println(tm.getText());
				String msg = tm.getText();
				String[] msgArgs = msg.split(" ");
				int workerId = -1;
				int data1 = 1;
				try {
					workerId = Integer.parseInt(msgArgs[0]);
					data1 = Integer.parseInt(msgArgs[1]);
					PrimeChecker pc = new PrimeChecker(workerId, data1);
					pc.doWork();
					
					ObjectMessage objectMessage = 
							session.createObjectMessage(pc);
					producer.send(objectMessage);
				} catch (NumberFormatException nfe) {
					System.out.println(
							"Error: Unexpected message data: " + msg);
					System.out.println(nfe.getMessage());
					System.out.println("Unable to send response object");
				}
			} else {
				System.out.println("Unexpected message type");
			}
						
			connection.close();
		} catch (JMSException e) {
			e.printStackTrace();
		} 

	}
	
	private static void print(String msg) {
		System.out.println(msg);
	}

}
